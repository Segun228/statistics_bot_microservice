from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import Iterable
from app.requests.get.get_datasets import get_datasets
from app.requests.get.get_distributions import get_distributions
from pprint import pprint

main = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ üì¶", callback_data="catalogue")],
        [InlineKeyboardButton(text="üë§ –ê–∫–∫–∞—É–Ω—Ç", callback_data="account_menu")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ]
)

account_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ê–¥–º–∏–Ω ‚öôÔ∏è", callback_data="admin_menu")],
        [InlineKeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üëë", callback_data="request_admin")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
)

delete_account_confirmation_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="delete_account")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="account_menu")],
    ]
)



home = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
)

restart = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="restart")],
    ]
)


catalogue = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=" –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalogue")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
)

catalogue_choice = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", callback_data="distributions")],
        [InlineKeyboardButton(text="–î–∞—Ç–∞—Å–µ—Ç—ã", callback_data="datasets")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
)

no_posts = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=" –°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å ‚úçÔ∏è", callback_data="catalogue")],
        [InlineKeyboardButton(text=" –ö–∞—Ç–∞–ª–æ–≥ üìñ", callback_data="catalogue")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
)



async def get_datasets_catalogue(telegram_id, datasets = None):
    if datasets is None:
        datasets = await get_datasets(telegram_id=telegram_id)
        print(datasets)
    keyboard = InlineKeyboardBuilder()
    pprint(datasets)
    if datasets and datasets is not None:
        for dataset in datasets:
            keyboard.add(InlineKeyboardButton(text=f"{dataset.get('name', dataset.get("columns", "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç"))}", callback_data=f"dataset_{dataset.get('id')}"))
    keyboard.add(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç ‚ú®", callback_data="create_dataset"))
    keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return keyboard.adjust(1).as_markup()

async def get_distributions_catalogue(telegram_id, distributions = None):
    if distributions is None:
        distributions = await get_distributions(telegram_id=telegram_id)
    pprint(distributions)
    keyboard = InlineKeyboardBuilder()
    if distributions and distributions is not None:
        for distribution in distributions:
            keyboard.add(InlineKeyboardButton(text=f"{distribution.get('name')}", callback_data=f"distribution_{distribution.get('id')}"))
    keyboard.add(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ‚ú®", callback_data="create_distribution"))
    keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return keyboard.adjust(1).as_markup()

async def give_acess(user_id):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="–†–∞–∑—Ä–µ—à–∏—Ç—å ‚úÖ", callback_data=f"access_give_{user_id}"))
    keyboard.add(InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"access_reject_{user_id}"))
    return keyboard.adjust(1).as_markup()


async def get_distribution_single_menu(distribution_id, telegram_id, distribution):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="–ì—Ä–∞—Ñ–∏–∫", callback_data=f"get_plot_{distribution_id}"))
    keyboard.add(InlineKeyboardButton(text="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", callback_data=f"get_probability_{distribution_id}"))
    keyboard.add(InlineKeyboardButton(text="–ò–Ω—Ç–µ—Ä–≤–∞–ª", callback_data=f"get_interval_{distribution_id}"))
    keyboard.add(InlineKeyboardButton(text="–ö–≤–∞–Ω—Ç–∏–ª—å", callback_data=f"get_quantile_{distribution_id}"))
    keyboard.add(InlineKeyboardButton(text="–ü–µ—Ä—Å–µ–Ω—Ç–∏–ª—å", callback_data=f"get_percentile_{distribution_id}"))
    keyboard.add(InlineKeyboardButton(text="–í—ã–±–æ—Ä–∫–∞", callback_data=f"get_sample_{distribution_id}"))
    keyboard.add(InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_distribution_{distribution_id}"))
    keyboard.add(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_distribution_{distribution_id}"))
    return keyboard.adjust(1).as_markup()


async def get_dataset_single_menu(dataset_id):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="–ê–ë —Ç–µ—Å—Ç—ã", callback_data=f"ab_tests_{dataset_id}"))
    keyboard.add(InlineKeyboardButton(text="ML-–∞–ª–≥–æ—Ä–∏—Ç–º—ã", callback_data=f"ml_algorithms_{dataset_id}"))
    keyboard.add(InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_dataset_{dataset_id}"))
    keyboard.add(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_dataset_{dataset_id}"))
    return keyboard.adjust(1).as_markup()


async def get_dataset_ab_menu(dataset_id):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="–ê–ë —Ç–µ—Å—Ç—ã", callback_data=f"ab_tests_{dataset_id}"))
    keyboard.add(InlineKeyboardButton(text="ML-–∞–ª–≥–æ—Ä–∏—Ç–º—ã", callback_data=f"ml_algorithms_{dataset_id}"))
    keyboard.add(InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_dataset_{dataset_id}"))
    keyboard.add(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_dataset_{dataset_id}"))
    return keyboard.adjust(1).as_markup()


async def get_dataset_ml_menu(dataset_id):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="–ê–ë —Ç–µ—Å—Ç—ã", callback_data=f"ab_tests_{dataset_id}"))
    keyboard.add(InlineKeyboardButton(text="ML-–∞–ª–≥–æ—Ä–∏—Ç–º—ã", callback_data=f"ml_algorithms_{dataset_id}"))
    keyboard.add(InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_dataset_{dataset_id}"))
    keyboard.add(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_dataset_{dataset_id}"))
    return keyboard.adjust(1).as_markup()

DISTRIBUTION_CHOICES = [
    ("normal", "Normal (–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ)"),
    ("binomial", "Binomial (–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ)"),
    ("poisson", "Poisson (–ü—É–∞—Å—Å–æ–Ω)"),
    ("uniform", "Uniform (–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ)"),
    ("exponential", "Exponential (–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ)"),
    ("beta", "Beta (–ë–µ—Ç–∞)"),
    ("gamma", "Gamma (–ì–∞–º–º–∞)"),
    ("lognormal", "Log-normal (–õ–æ–≥-–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ)"),
    ("chi2", "Chi-squared (–•–∏-–∫–≤–∞–¥—Ä–∞—Ç)"),
    ("t", "Student t (–°—Ç—å—é–¥–µ–Ω—Ç–∞)"),
    ("f", "F-distribution (–§–∏—à–µ—Ä–∞)"),
    ("geometric", "Geometric (–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ)"),
    ("hypergeom", "Hypergeometric (–ì–∏–ø–µ—Ä–≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ)"),
    ("negative_binomial", "Negative Binomial (–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ)"),
]

async def choose_distribution_type():
    keyboard = InlineKeyboardBuilder()
    for typum in DISTRIBUTION_CHOICES:
        keyboard.add(InlineKeyboardButton(text=f"{typum[1]}", callback_data=typum[0]))
    return keyboard.adjust(1).as_markup()