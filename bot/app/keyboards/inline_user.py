from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import Iterable
from app.requests.get.get_sets import get_sets

main = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ üì¶", callback_data="catalogue")],
        [InlineKeyboardButton(text="üë§ –ê–∫–∫–∞—É–Ω—Ç", callback_data="account_menu")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ]
)

account_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ê–¥–º–∏–Ω ‚öôÔ∏è", callback_data="admin_menu")],
        [InlineKeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üëë", callback_data="request_admin")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
)

delete_account_confirmation_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="delete_account")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="account_menu")],
    ]
)



home = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
)

restart = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="restart")],
    ]
)


catalogue = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=" –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalogue")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
)

catalogue_choice = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", callback_data="distributions")],
        [InlineKeyboardButton(text="–î–∞—Ç–∞—Å–µ—Ç—ã", callback_data="datasets")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
)

no_posts = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=" –°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å ‚úçÔ∏è", callback_data="catalogue")],
        [InlineKeyboardButton(text=" –ö–∞—Ç–∞–ª–æ–≥ üìñ", callback_data="catalogue")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ]
)



async def get_datasets_catalogue(telegram_id, datasets = None):
    if datasets is None:
        datasets = await get_datasets(telegram_id=telegram_id)
    keyboard = InlineKeyboardBuilder()
    if datasets and datasets is not None:
        for dataset in datasets:
            keyboard.add(InlineKeyboardButton(text=f"{dataset.get('name')}", callback_data=f"dataset_{dataset.get('id')}"))
    keyboard.add(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç ‚ú®", callback_data="create_dataset"))
    keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return keyboard.adjust(1).as_markup()

async def get_distributions_catalogue(telegram_id, distributions = None):
    if distributions is None:
        distributions = await get_distributions(telegram_id=telegram_id)
    keyboard = InlineKeyboardBuilder()
    if distributions and distributions is not None:
        for distribution in distributions:
            keyboard.add(InlineKeyboardButton(text=f"{distribution.get('name')}", callback_data=f"distribution_{distribution.get('id')}"))
    keyboard.add(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ‚ú®", callback_data="create_distribution"))
    keyboard.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return keyboard.adjust(1).as_markup()

async def give_acess(user_id):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="–†–∞–∑—Ä–µ—à–∏—Ç—å ‚úÖ", callback_data=f"access_give_{user_id}"))
    keyboard.add(InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"access_reject_{user_id}"))
    return keyboard.adjust(1).as_markup()
