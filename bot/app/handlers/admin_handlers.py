from app.handlers.router import admin_router as router
import logging
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram import F
from typing import Dict, Any
from aiogram.fsm.context import FSMContext
from aiogram import Router, Bot
from aiogram.exceptions import TelegramAPIError
from io import BytesIO
import asyncio

from aiogram.types import InputFile

from app.keyboards import inline_admin as inline_keyboards

from app.states.states import Unit, Send, File, Set

from aiogram.types import BufferedInputFile


from app.keyboards.inline_user import get_catalogue, get_posts

from app.filters.IsAdmin import IsAdmin

from app.requests.user.login import login
from app.requests.helpers.get_cat_error import get_cat_error_async
from app.requests.get.get_sets import get_sets
from app.requests.get.get_post import get_post

from app.requests.helpers.get_cat_error import get_cat_error_async

from app.requests.post.postCategory import post_set
from app.requests.post.postPost import post_post
from app.requests.put.putCategory import put_set
from app.requests.put.putPost import put_post
from app.requests.delete.deleteCategory import delete_category
from app.requests.delete.deletePost import delete_post
from app.requests.user.get_alive import get_alive
from app.requests.user.make_admin import make_admin

from app.requests.files.get_report import get_report
from app.requests.files.put_report import put_report

from app.kafka.utils import build_log_message
#===========================================================================================================================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
#===========================================================================================================================


@router.message(CommandStart())
async def cmd_start_admin(message: Message, state: FSMContext):
    data = await login(telegram_id=message.from_user.id)
    if data is None:
        logging.error("Error while logging in")
        await message.answer("–ë–æ—Ç –µ—â–µ –Ω–µ –ø—Ä–æ—Å–Ω—É–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å üòî", reply_markup=inline_keyboards.restart)
        return
    await state.update_data(telegram_id = data.get("telegram_id"))
    await message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã")
    await message.answer("–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫—É –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞–ø–∞, –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç—É–≥–∏—é, –∞ —Ç–∞–∫–∂–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å (—á—Ç–æ–± –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –≤–∞—Å –Ω–µ —Å—ä–µ–ª–∏)")
    await message.answer("–°–µ–π—á–∞—Å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å –∫–∞–∫ –Ω–∞–±–æ—Ä—ã –º–æ–¥–µ–ª–µ–π (–ø—Ä–æ–≥—Ä–∞–º–º—ã), —Ç–∞–∫ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏")
    await message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    build_log_message(
        telegram_id=message.from_user.id,
        action="command",
        source="command",
        payload="start"
    )
    await state.clear()


@router.callback_query(F.data == "restart")
async def callback_start_admin(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    data = await login(telegram_id=callback.from_user.id)
    if data is None:
        logging.error("Error while logging in")
        await callback.message.answer("–ë–æ—Ç –µ—â–µ –Ω–µ –ø—Ä–æ—Å–Ω—É–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å üòî", reply_markup=inline_keyboards.restart)
        return
    await state.update_data(telegram_id = data.get("telegram_id"))
    await callback.message.reply("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! üëã")
    await callback.message.answer("–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫—É –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞–ø–∞, –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç—É–≥–∏—é, –∞ —Ç–∞–∫–∂–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å (—á—Ç–æ–± –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –≤–∞—Å –Ω–µ —Å—ä–µ–ª–∏)")
    await callback.message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    build_log_message(
        telegram_id=callback.from_user.id,
        action="inline",
        source="callback",
        payload="restart"
    )
    await callback.answer()


@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.reply(text="–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —é–Ω–∏—Ç —ç–∫–æ–Ω–æ–º–∏–∫—É, –ø–æ–¥–±–∏—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –∏–ª–∏ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª-–≤–æ —é–Ω–∏—Ç–æ–≤ –∏ —Ç–æ—á–∫—É –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏\n\n –û–Ω –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π \n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ñ—É–Ω–∫—Ü–∏–∏, –≤ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö –≤–∞–º –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –∏–ª–∏ –ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É, –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏:\n\n—Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞\n\n@dianabol_metandienon_enjoyer", reply_markup=inline_keyboards.home)

@router.message(Command("contacts"))
async def cmd_contacts(message: Message):
    text = "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: üìû\n\n\\—Ç—É—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞\n\n"+"–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ–º: üìû\n\n\\@dianabol\\_metandienon\\_enjoyer ü§ù"
    await message.reply(text=text, reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')

@router.callback_query(F.data == "contacts")
async def contacts_callback(callback: CallbackQuery):
    text = "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: üìû\n\n\\—Ç—É—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞\n\n"+"–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ–º: üìû\n\n\\@dianabol\\_metandienon\\_enjoyer ü§ù"
    await callback.message.edit_text(text=text, reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    await callback.message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await callback.answer()

#===========================================================================================================================
# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
#===========================================================================================================================

@router.callback_query(F.data == "send_menu", IsAdmin())
async def send_menu_admin(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Send.handle)
    await callback.message.answer(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏",
        reply_markup=inline_keyboards.catalogue
    )
    return


@router.callback_query(F.data == "send_menu", IsAdmin())
async def send_menu_admin(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é. ",
        reply_markup=inline_keyboards.catalogue
    )
    


@router.message(Send.handle, F.photo, IsAdmin())
async def send_photo_message(message: Message, state: FSMContext):
    photo = message.photo[-1].file_id
    caption = message.caption or ""
    await state.update_data(photo=photo, caption=caption)
    await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    await start_broadcast(state, message, message.bot)


@router.message(Send.handle, F.text, IsAdmin())
async def send_text_message(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    await start_broadcast(state, message, message.bot)


async def start_broadcast(state: FSMContext, message: Message, bot: Bot):
    data = await state.get_data()
    users_data = await get_alive(telegram_id=message.from_user.id)

    if not users_data:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    tasks = []
    for user in users_data:
        user_id = user.get("telegram_id")
        if "photo" in data:
            tasks.append(
                bot.send_photo(chat_id=user_id, photo=data["photo"], caption=data.get("caption", ""))
            )
        elif "text" in data:
            tasks.append(
                bot.send_message(chat_id=user_id, text=data["text"])
            )

    results = await asyncio.gather(*tasks, return_exceptions=True)

    successful_sends = sum(1 for r in results if not isinstance(r, TelegramAPIError))
    failed_sends = len(results) - successful_sends

    await message.answer(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_sends}\n‚ùå –û—à–∏–±–∫–∏: {failed_sends}",
        reply_markup=inline_keyboards.main
    )
    await state.clear()

#===========================================================================================================================
# –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
#===========================================================================================================================


@router.callback_query(F.data.startswith("access_give"), IsAdmin())
async def give_acess_admin(callback: CallbackQuery, state: FSMContext, bot:Bot):
    request = str(callback.data)
    try:
        user_id = list(request.split("_"))[2]
        if not user_id:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞")
            return
        response = await make_admin(
            telegram_id= callback.from_user.id,
            target_user_id= user_id
        )
        if not response:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞")
            await bot.send_message(chat_id=int(user_id), text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=inline_keyboards.home)
        else:
            logging.info(response)
            await callback.message.answer("–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã", reply_markup=inline_keyboards.home)
            await bot.send_message(chat_id=user_id, text="–í–∞–º –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=inline_keyboards.home)
    except Exception as e:
        logging.error(e)


@router.callback_query(F.data.startswith("access_reject"), IsAdmin())
async def reject_acess_admin(callback: CallbackQuery, state: FSMContext, bot:Bot):
    request = str(callback.data)
    try:
        user_id = list(request.split("_"))[2]
        await bot.send_message(chat_id=int(user_id), text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=inline_keyboards.home)
    except Exception as e:
        logging.error(e)



#===========================================================================================================================
# –§–∞–π–ª–æ–≤–æ–µ –º–µ–Ω—é
#===========================================================================================================================


@router.callback_query(F.data == "file_panel", IsAdmin())
async def file_panel_admin(callback: CallbackQuery, state: FSMContext, bot:Bot):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é",
        reply_markup= inline_keyboards.file_panel
    )


@router.callback_query(F.data == "get_report", IsAdmin())
async def send_report_admin(callback: CallbackQuery, state: FSMContext, bot: Bot):

    await callback.answer("–ì–æ—Ç–æ–≤–ª—é –≤–∞—à –æ—Ç—á—ë—Ç...", show_alert=False)
    docs = await get_report(telegram_id=callback.from_user.id)

    if not docs:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    await callback.message.answer(
        "–í–æ—Ç –≤–∞—à –æ—Ç—á—ë—Ç!"
    )

    await bot.send_document(
        chat_id=callback.message.chat.id,
        document=BufferedInputFile(docs.getvalue(), filename="report.xlsx"),
        reply_markup=inline_keyboards.file_panel
    )
    await state.clear()



@router.callback_query(F.data == "add_posts", IsAdmin())
async def file_add_posts_admin(callback: CallbackQuery, state: FSMContext, bot:Bot):
    await callback.message.answer(
        "–≠—Ç–æ —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏"
    )
    docs = await get_report(telegram_id=callback.from_user.id)
    await bot.send_document(
        chat_id=callback.message.chat.id,
        document=BufferedInputFile(docs.getvalue(), filename="report.xlsx"),
    )
    await callback.message.answer(
        "–í—ã –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π. –û—Ç–ø—Ä–∞–≤—Ç–µ –≤ —á–∞—Ç —Ñ–∞–π–ª —Å –ø–æ–∑–∏—Ü–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ"
    )
    await state.set_state(File.waiting_for_file)


@router.message(File.waiting_for_file, IsAdmin())
async def upload_add_file_admin(message: Message, state: FSMContext, bot: Bot):
    try:

        file = await bot.get_file(message.document.file_id)
        file_bytes = await bot.download_file(file.file_path)
        response = await put_report(message.from_user.id, file_bytes)


        if not response:
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É."
            )
            await state.clear()
            return
        await message.answer("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!", reply_markup= inline_keyboards.file_panel)
        await state.clear()

    except Exception as e:
        await state.clear()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Excel (.xlsx).", reply_markup= inline_keyboards.file_panel)


@router.callback_query(F.data == "replace_posts", IsAdmin())
async def file_replace_posts_admin(callback: CallbackQuery, state: FSMContext, bot:Bot):
    await callback.message.answer(
        "–≠—Ç–æ —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏"
    )
    docs = await get_report(telegram_id=callback.from_user.id)
    await bot.send_document(
        chat_id=callback.message.chat.id,
        document=BufferedInputFile(docs.getvalue(), filename="report.xlsx"),
    )
    await callback.message.answer(
        "–í—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π. –û—Ç–ø—Ä–∞–≤—Ç–µ –≤ —á–∞—Ç —Ñ–∞–π–ª —Å –ø–æ–∑–∏—Ü–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ. –ë—É–¥—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã"
    )
    await state.set_state(File.waiting_for_replace_file)


@router.message(File.waiting_for_replace_file, IsAdmin())
async def upload_replace_file_admin(message: Message, state: FSMContext, bot: Bot):
    try:
        file = await bot.get_file(message.document.file_id)
        file_bytes = await bot.download_file(file.file_path)
        response = await replace_report(message.from_user.id, file_bytes)
        if not response:
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É."
            )
            await state.clear()
            return
        await message.answer("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ü–æ–∑–∏—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup= inline_keyboards.file_panel)
        await state.clear()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel: {e}")
        await state.clear()
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Excel (.xlsx).", reply_markup= inline_keyboards.file_panel)
