from app.handlers.router import admin_router as router
import logging
import re
import zipfile
import io
import json
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram import F
from typing import Dict, Any
from aiogram.fsm.context import FSMContext
from aiogram import Router, Bot
from aiogram.exceptions import TelegramAPIError
from io import BytesIO
import asyncio

from aiogram.types import InputFile

from app.keyboards import inline_user as inline_keyboards

from app.states.states import Send, File, Distribution, Dataset, DistributionEdit, DatasetEdit

from aiogram.types import BufferedInputFile


from app.keyboards.inline_user import get_datasets_catalogue, get_distributions_catalogue

from app.filters.IsAdmin import IsAdmin

from app.requests.user.login import login
from app.requests.helpers.get_cat_error import get_cat_error_async

from app.requests.helpers.get_cat_error import get_cat_error_async

from app.requests.user.get_alive import get_alive
from app.requests.user.make_admin import make_admin

from app.kafka.utils import build_log_message

from app.requests.get.get_datasets import get_datasets, retrieve_dataset, get_dataset_file
from app.requests.get.get_distributions import get_distributions, retrieve_distribution

from app.requests.post.post_dataset import post_dataset
from app.requests.post.post_distribution import post_distribution

from app.requests.put.put_dataset import put_dataset
from app.requests.put.put_distribution import put_distribution

from app.requests.delete.delete_dataset import delete_dataset
from app.requests.delete.deleteDistribution import delete_distribution
#===========================================================================================================================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
#===========================================================================================================================


@router.message(CommandStart(), IsAdmin())
async def cmd_start_admin(message: Message, state: FSMContext):
    data = await login(telegram_id=message.from_user.id)
    if data is None:
        logging.error("Error while logging in")
        await message.answer("–ë–æ—Ç –µ—â–µ –Ω–µ –ø—Ä–æ—Å–Ω—É–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å üòî", reply_markup=inline_keyboards.restart)
        return
    await state.update_data(telegram_id = data.get("telegram_id"))
    await message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã")
    await message.answer("–Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –ø–æ–ª–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ú–∞—Ç–°—Ç–∞—Ç–∞ –∏ –ê–ë—Ç–µ—Å—Ç–æ–≤")
    await message.answer("–°–µ–π—á–∞—Å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –¥–∞—Ç–∞—Å–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV")
    await message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await state.clear()
    await build_log_message(
        telegram_id=message.from_user.id,
        action="command",
        source="command",
        payload="start"
    )


@router.callback_query(F.data == "restart")
async def callback_start_admin(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    data = await login(telegram_id=callback.from_user.id)
    if data is None:
        logging.error("Error while logging in")
        await callback.message.answer("–ë–æ—Ç –µ—â–µ –Ω–µ –ø—Ä–æ—Å–Ω—É–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å üòî", reply_markup=inline_keyboards.restart)
        return
    await state.update_data(telegram_id = data.get("telegram_id"))
    await callback.message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã")
    await callback.message.answer("–Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –ø–æ–ª–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ú–∞—Ç–°—Ç–∞—Ç–∞ –∏ –ê–ë—Ç–µ—Å—Ç–æ–≤")
    await callback.message.answer("–°–µ–π—á–∞—Å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –¥–∞—Ç–∞—Å–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV")
    await callback.answer()
    await build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="restart"
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    await build_log_message(
        telegram_id=message.from_user.id,
        action="command",
        source="command",
        payload="help"
    )
    await message.reply(text="–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –∞ —Ç–∞–∫–∂–µ –æ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ê–ë —Ç–µ—Å—Ç–æ–≤\n\n –û–Ω –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π \n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ñ—É–Ω–∫—Ü–∏–∏, –≤ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö –≤–∞–º –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –∏–ª–∏ –ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É, –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏:\n\n@dianabol_metandienon_enjoyer", reply_markup=inline_keyboards.home)

@router.message(Command("contacts"))
async def cmd_contacts(message: Message):
    await build_log_message(
        telegram_id=message.from_user.id,
        action="command",
        source="command",
        payload="contacts"
    )
    text = "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ–º: üìû\n\n\\@dianabol\\_metandienon\\_–µ–Ωjoyer ü§ù"
    await message.reply(text=text, reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')

@router.callback_query(F.data == "contacts")
async def contacts_callback(callback: CallbackQuery):
    await build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="menu",
        payload="contacts"
    )
    text = "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ–º: üìû\n\n\\@dianabol\\_metandienon\\_enjoyer ü§ù"
    await callback.message.edit_text(text=text, reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    await build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="menu",
        payload="main_menu"
    )
    await callback.message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await callback.answer()

#===========================================================================================================================
# –ö–∞—Ç–∞–ª–æ–≥
#===========================================================================================================================
@router.callback_query(F.data == "catalogue")
async def catalogue_callback_admin(callback: CallbackQuery):
    await build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="menu",
        payload="catalogue"
    )
    await callback.message.answer("–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?üëá", reply_markup = inline_keyboards.catalogue_choice)
    await callback.answer()


@router.callback_query(F.data == "distributions")
async def get_distributions_inline_catalogue(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ, –≤–æ—Ç –≤–∞—à–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!", reply_markup = await inline_keyboards.get_distributions_catalogue(telegram_id=callback.from_user.id))




@router.callback_query(F.data == "datasets")
async def get_datasets_inline_catalogue(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ, –≤–æ—Ç –≤–∞—à–∏ –¥–∞—Ç–∞—Å–µ—Ç—ã!", reply_markup = await inline_keyboards.get_datasets_catalogue(telegram_id=callback.from_user.id))


@router.callback_query(F.data.startswith("distribution_"))
async def distribution_catalogue_callback_admin(callback: CallbackQuery):
    try:
        await callback.answer()
        distribution_id = callback.data.split("_")[1]
        await build_log_message(
            telegram_id=callback.from_user.id,
            action="callback",
            source="menu",
            payload=f"distribution_{distribution_id}"
        )
        current_distribution = await retrieve_distribution(telegram_id=callback.from_user.id, distribution_id=distribution_id)
        if current_distribution is None:
            await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç—É—Ç –ø–æ–∫–∞ –ø—É—Å—Ç–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–π—Ç–µ—Å—å –ø–æ–∑–∂–µ!", reply_markup= await get_distributions_catalogue(telegram_id=callback.from_user.id))
            await callback.answer()
            return
        data = current_distribution

        params = json.loads(data['distribution_parameters'].replace("'", '"'))
        param_string = "\n"
        for key, value in params.items():
            param_string += f" \- *{key.replace(".", "\.")}* \= {value.replace(".", "\.")}\n"
        param_string += "\n\n"
        msg = (
            f"*Name:* {data['name']}\n"
            f"*Type:* {data['distribution_type']}\n"
            f"*Parameters:* {param_string}"
        )
        await callback.message.answer(msg, parse_mode="MarkdownV2", reply_markup=await inline_keyboards.get_distribution_single_menu(distribution_id = distribution_id, telegram_id = callback.from_user.id, distribution = current_distribution))
    except Exception as e:
        logging.exception(e)
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", reply_markup=await inline_keyboards.get_datasets_catalogue(telegram_id=callback.from_user.id))


def escape_md(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
    if not text:
        return ""
    
    escape_chars = '_*[]()~`>#+-=|{}.!'
    result = []
    for char in str(text):
        if char in escape_chars:
            result.append(f'\\{char}')
        else:
            result.append(char)
    return ''.join(result)

@router.callback_query(F.data.startswith("dataset_"))
async def dataset_catalogue_callback_admin(callback: CallbackQuery, bot:Bot):
    try:
        await callback.answer()
        dataset_id = callback.data.split("_")[1]
        await build_log_message(
            telegram_id=callback.from_user.id,
            action="callback",
            source="menu",
            payload=f"dataset_{dataset_id}"
        )
        current_dataset = await retrieve_dataset(telegram_id=callback.from_user.id, dataset_id=dataset_id)
        if current_dataset is None:
            await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç—É—Ç –ø–æ–∫–∞ –ø—É—Å—Ç–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–π—Ç–µ—Å—å –ø–æ–∑–∂–µ!", reply_markup= await get_distributions_catalogue(telegram_id=callback.from_user.id))
            await callback.answer()
            return
        data = current_dataset


        name = escape_md(data['name'])
        alpha = escape_md(str(data['alpha']))
        beta = escape_md(str(data['beta']))
        test = escape_md(str(data['test']) or "Not set yet")
        control = escape_md(str(data['control']) or "Not set yet")
        length = escape_md(str(data['length']) or "Not set yet")


        params = data['columns']
        param_string = "\n"
        for nam in params:
            escaped_nam = escape_md(nam)
            param_string += f"{escaped_nam}\n"
        param_string += "\n"
        
        msg = (
            f"*Name:* {name}\n\n"
            f"*Columns:* {param_string}"
            f"*Alpha:* {alpha}\n"
            f"*Beta:* {beta}\n\n"
            f"*Test group:* {test}\n"
            f"*Controle group:* {control}\n\n"
            f"*Final length:* {length}\n"
        )
        await callback.message.answer(msg, parse_mode="MarkdownV2", reply_markup=await inline_keyboards.get_dataset_single_menu(dataset_id = dataset_id))
    except Exception as e:
        logging.exception(e)
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç", reply_markup=await inline_keyboards.get_datasets_catalogue(telegram_id=callback.from_user.id))


@router.callback_query(F.data.startswith("datasetfile_"))
async def dataset_get_file(callback: CallbackQuery, bot:Bot):
    try:
        await callback.answer()
        dataset_id = callback.data.split("_")[1]
        await build_log_message(
            telegram_id=callback.from_user.id,
            action="callback",
            source="menu",
            payload=f"dataset_{dataset_id}"
        )
        current_dataset = await retrieve_dataset(telegram_id=callback.from_user.id, dataset_id=dataset_id)
        if current_dataset is None:
            await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç—É—Ç –ø–æ–∫–∞ –ø—É—Å—Ç–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–π—Ç–µ—Å—å –ø–æ–∑–∂–µ!", reply_markup= await get_distributions_catalogue(telegram_id=callback.from_user.id))
            await callback.answer()
            return
        dataset_bytes = await get_dataset_file(
            telegram_id=callback.from_user.id,
            url=current_dataset.get("url")
        )
        if dataset_bytes:
            file = BufferedInputFile(
                file=dataset_bytes,
                filename="dataset.csv"
            )
            await bot.send_document(
                chat_id=callback.from_user.id,
                document=file
            )
        else:
            await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç")
        data = current_dataset


        name = escape_md(data['name'])
        alpha = escape_md(str(data['alpha']))
        beta = escape_md(str(data['beta']))
        test = escape_md(str(data['test']) or "Not set yet")
        control = escape_md(str(data['control']) or "Not set yet")
        length = escape_md(str(data['length']) or "Not set yet")


        params = data['columns']
        param_string = "\n"
        for nam in params:
            escaped_nam = escape_md(nam)
            param_string += f"{escaped_nam}\n"
        param_string += "\n"
        
        msg = (
            f"*Name:* {name}\n\n"
            f"*Columns:* {param_string}"
            f"*Alpha:* {alpha}\n"
            f"*Beta:* {beta}\n\n"
            f"*Test group:* {test}\n"
            f"*Controle group:* {control}\n\n"
            f"*Final length:* {length}\n"
        )
        await callback.message.answer(msg, parse_mode="MarkdownV2", reply_markup=await inline_keyboards.get_dataset_single_menu(dataset_id = dataset_id))
    except Exception as e:
        logging.exception(e)
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç", reply_markup=await inline_keyboards.get_datasets_catalogue(telegram_id=callback.from_user.id))



#===========================================================================================================================
# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
#===========================================================================================================================

@router.callback_query(F.data == "create_distribution")
async def distribution_create_callback(callback: CallbackQuery, state: FSMContext):
    await build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="create_distribution"
    )
    await state.clear()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
    await state.set_state(Distribution.name)
    await callback.answer()


@router.message( Distribution.name)
async def choose_distrib_type(message: Message, state: FSMContext):
    await state.set_state(Distribution.distribution_type)
    name = (message.text).strip()
    await state.update_data(name = name)
    current_state = await state.get_state()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", reply_markup=await inline_keyboards.choose_distribution_type())



@router.callback_query(F.data, Distribution.distribution_type)
async def distribution_create_callback_admin_description(callback: CallbackQuery, state: FSMContext):
    distribution_type = (callback.data).strip()
    await state.update_data(distribution_type = distribution_type)
    msg = """
        *üé≤ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è*

        –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã *—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª*\. –ù–∏–∂–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:

        _–ü—Ä–∏–º–µ—Ä—ã:_
        `mu sigma` ‚Äî –¥–ª—è `normal`  
        `a b loc scale` ‚Äî –¥–ª—è `beta`

        *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:*

        ‚Ä¢ `normal` ‚Äî `mu sigma`  
        mu ‚Äî –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ  
        sigma ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ

        ‚Ä¢ `uniform` ‚Äî `loc scale`  
        loc ‚Äî –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞  
        scale ‚Äî —à–∏—Ä–∏–Ω–∞ \(scale \= –≤–µ—Ä—Ö–Ω—è—è \- –Ω–∏–∂–Ω—è—è\)

        ‚Ä¢ `exponential` ‚Äî `loc scale`  
        loc ‚Äî —Å–º–µ—â–µ–Ω–∏–µ  
        scale ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Å—à—Ç–∞–±–∞ \(1/Œª\)

        ‚Ä¢ `gamma` ‚Äî `a loc scale`  
        a ‚Äî shape \(—Ñ–æ—Ä–º–∞\)  
        loc ‚Äî —Å–º–µ—â–µ–Ω–∏–µ  
        scale ‚Äî –º–∞—Å—à—Ç–∞–±

        ‚Ä¢ `beta` ‚Äî `a b loc scale`  
        a ‚Äî alpha \(—Ñ–æ—Ä–º–∞\)  
        b ‚Äî beta \(—Ñ–æ—Ä–º–∞\)  
        loc ‚Äî —Å–º–µ—â–µ–Ω–∏–µ  
        scale ‚Äî –º–∞—Å—à—Ç–∞–±

        ‚Ä¢ `binomial` ‚Äî `n p`  
        n ‚Äî —á–∏—Å–ª–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π  
        p ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞

        ‚Ä¢ `poisson` ‚Äî `mu`  
        mu ‚Äî —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Å–æ–±—ã—Ç–∏–π

        ‚Ä¢ `chi2` ‚Äî `df loc scale`  
        df ‚Äî —Å—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã  
        loc ‚Äî —Å–º–µ—â–µ–Ω–∏–µ  
        scale ‚Äî –º–∞—Å—à—Ç–∞–±

        ‚Ä¢ `t` ‚Äî `df loc scale`  
        df ‚Äî —Å—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã  
        loc ‚Äî —Å–º–µ—â–µ–Ω–∏–µ  
        scale ‚Äî –º–∞—Å—à—Ç–∞–±

        ‚Ä¢ `f` ‚Äî `dfn dfd loc scale`  
        dfn ‚Äî —á–∏—Å–ª–∏—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã  
        dfd ‚Äî –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã  
        loc ‚Äî —Å–º–µ—â–µ–Ω–∏–µ  
        scale ‚Äî –º–∞—Å—à—Ç–∞–±

        ‚Ä¢ `lognormal` ‚Äî `s loc scale`  
        s ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ log  
        loc ‚Äî —Å–º–µ—â–µ–Ω–∏–µ  
        scale ‚Äî –º–∞—Å—à—Ç–∞–± \(exp\(mean\)\)

        ‚Ä¢ `geometric` ‚Äî `p`  
        p ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞

        ‚Ä¢ `hypergeom` ‚Äî `M n N`  
        M ‚Äî –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤  
        n ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "—É—Å–ø–µ—à–Ω—ã—Ö" –æ–±—ä–µ–∫—Ç–æ–≤  
        N ‚Äî —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏

        ‚Ä¢ `negative_binomial` ‚Äî `n p`  
        n ‚Äî —á–∏—Å–ª–æ —É—Å–ø–µ—Ö–æ–≤  
        p ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞
        _–ï—Å–ª–∏ –≤—ã –≤–≤–µ–¥—ë—Ç–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:_  
        `normal` —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ `mu=0`, `sigma=1`
        """
    await callback.message.answer(text = msg, parse_mode="MarkdownV2")
    await state.set_state(Distribution.params)


@router.message(Distribution.params)
async def category_enter_name_admin(message: Message, state: FSMContext):
    params = list((message.text).strip().split(" "))
    data = await state.get_data()
    name = data.get("name")
    distribution_type = data.get("distribution_type").strip()
    distribution_params = {
        "normal": ["mu", "sigma"],
        "binomial": ["n", "p"],
        "poisson": ["mu"],
        "uniform": ["loc", "scale"],
        "exponential": ["loc", "scale"],
        "beta": ["a", "b", "loc", "scale"],
        "gamma": ["a", "loc", "scale"],
        "lognormal": ["s", "loc", "scale"],
        "chi2": ["df", "loc", "scale"],
        "t": ["df", "loc", "scale"],
        "f": ["dfn", "dfd", "loc", "scale"],
        "geometric": ["p"],
        "hypergeom": ["M", "n", "N"],
        "negative_binomial": ["n", "p"]
    }
    param_names = distribution_params[distribution_type]
    if len(param_names) != len(params):
        distribution_type = "normal"
        final_params = {
            "mu":0,
            "sigma":1
        }
    else:
        final_params = {}
        for nam, par in zip(param_names, params):
            final_params[nam] = par
    response = await post_distribution(telegram_id=message.from_user.id, name=name, distribution_type=distribution_type, distribution_parameters=final_params)
    if not response:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", reply_markup=inline_keyboards.main)
        return
    await message.answer("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!", reply_markup= await get_distributions_catalogue(telegram_id = message.from_user.id))
    await state.clear()


#===========================================================================================================================
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
#===========================================================================================================================

@router.callback_query(F.data.startswith("edit_distribution"))
async def distribution_edit_callback(callback: CallbackQuery, state: FSMContext):
    distribution_id = callback.data.split("_")[2]
    await state.update_data(id = distribution_id)
    await build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="edit_distribution"
    )
    await state.clear()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
    await state.set_state(Distribution.name)
    await callback.answer()


@router.message( Distribution.name)
async def choose_distrib_type_edit(message: Message, state: FSMContext):
    await state.set_state(Distribution.distribution_type)
    name = (message.text).strip()
    await state.update_data(name = name)
    current_state = await state.get_state()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", reply_markup=await inline_keyboards.choose_distribution_type())



@router.callback_query(F.data, Distribution.distribution_type)
async def distribution_edit_callback_admin_description(callback: CallbackQuery, state: FSMContext):
    distribution_type = (callback.data).strip()
    await state.update_data(distribution_type = distribution_type)
    msg = """
        *üé≤ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è*

        –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã *—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª*\. –ù–∏–∂–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:

        _–ü—Ä–∏–º–µ—Ä—ã:_
        `mu sigma` ‚Äî –¥–ª—è `normal`  
        `a b loc scale` ‚Äî –¥–ª—è `beta`

        *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:*

        ‚Ä¢ `normal` ‚Äî `mu sigma`  
        mu ‚Äî –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ  
        sigma ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ

        ‚Ä¢ `uniform` ‚Äî `loc scale`  
        loc ‚Äî –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞  
        scale ‚Äî —à–∏—Ä–∏–Ω–∞ \(scale \= –≤–µ—Ä—Ö–Ω—è—è \- –Ω–∏–∂–Ω—è—è\)

        ‚Ä¢ `exponential` ‚Äî `loc scale`  
        loc ‚Äî —Å–º–µ—â–µ–Ω–∏–µ  
        scale ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Å—à—Ç–∞–±–∞ \(1/Œª\)

        ‚Ä¢ `gamma` ‚Äî `a loc scale`  
        a ‚Äî shape \(—Ñ–æ—Ä–º–∞\)  
        loc ‚Äî —Å–º–µ—â–µ–Ω–∏–µ  
        scale ‚Äî –º–∞—Å—à—Ç–∞–±

        ‚Ä¢ `beta` ‚Äî `a b loc scale`  
        a ‚Äî alpha \(—Ñ–æ—Ä–º–∞\)  
        b ‚Äî beta \(—Ñ–æ—Ä–º–∞\)  
        loc ‚Äî —Å–º–µ—â–µ–Ω–∏–µ  
        scale ‚Äî –º–∞—Å—à—Ç–∞–±

        ‚Ä¢ `binomial` ‚Äî `n p`  
        n ‚Äî —á–∏—Å–ª–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π  
        p ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞

        ‚Ä¢ `poisson` ‚Äî `mu`  
        mu ‚Äî —Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Å–æ–±—ã—Ç–∏–π

        ‚Ä¢ `chi2` ‚Äî `df loc scale`  
        df ‚Äî —Å—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã  
        loc ‚Äî —Å–º–µ—â–µ–Ω–∏–µ  
        scale ‚Äî –º–∞—Å—à—Ç–∞–±

        ‚Ä¢ `t` ‚Äî `df loc scale`  
        df ‚Äî —Å—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã  
        loc ‚Äî —Å–º–µ—â–µ–Ω–∏–µ  
        scale ‚Äî –º–∞—Å—à—Ç–∞–±

        ‚Ä¢ `f` ‚Äî `dfn dfd loc scale`  
        dfn ‚Äî —á–∏—Å–ª–∏—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã  
        dfd ‚Äî –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã  
        loc ‚Äî —Å–º–µ—â–µ–Ω–∏–µ  
        scale ‚Äî –º–∞—Å—à—Ç–∞–±

        ‚Ä¢ `lognormal` ‚Äî `s loc scale`  
        s ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ log  
        loc ‚Äî —Å–º–µ—â–µ–Ω–∏–µ  
        scale ‚Äî –º–∞—Å—à—Ç–∞–± \(exp\(mean\)\)

        ‚Ä¢ `geometric` ‚Äî `p`  
        p ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞

        ‚Ä¢ `hypergeom` ‚Äî `M n N`  
        M ‚Äî –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤  
        n ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "—É—Å–ø–µ—à–Ω—ã—Ö" –æ–±—ä–µ–∫—Ç–æ–≤  
        N ‚Äî —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏

        ‚Ä¢ `negative_binomial` ‚Äî `n p`  
        n ‚Äî —á–∏—Å–ª–æ —É—Å–ø–µ—Ö–æ–≤  
        p ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞
        _–ï—Å–ª–∏ –≤—ã –≤–≤–µ–¥—ë—Ç–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:_  
        `normal` —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ `mu=0`, `sigma=1`
        """
    await callback.message.answer(text = msg, parse_mode="MarkdownV2")
    await state.set_state(Distribution.params)


@router.message(Distribution.params)
async def category_edit_name_admin(message: Message, state: FSMContext):
    params = list((message.text).strip().split(" "))
    data = await state.get_data()
    id = data.get("id")
    name = data.get("name")
    distribution_type = data.get("distribution_type").strip()
    distribution_params = {
        "normal": ["mu", "sigma"],
        "binomial": ["n", "p"],
        "poisson": ["mu"],
        "uniform": ["loc", "scale"],
        "exponential": ["loc", "scale"],
        "beta": ["a", "b", "loc", "scale"],
        "gamma": ["a", "loc", "scale"],
        "lognormal": ["s", "loc", "scale"],
        "chi2": ["df", "loc", "scale"],
        "t": ["df", "loc", "scale"],
        "f": ["dfn", "dfd", "loc", "scale"],
        "geometric": ["p"],
        "hypergeom": ["M", "n", "N"],
        "negative_binomial": ["n", "p"]
    }
    param_names = distribution_params[distribution_type]
    if len(param_names) != len(params):
        distribution_type = "normal"
        final_params = {
            "mu":0,
            "sigma":1
        }
    else:
        final_params = {}
        for nam, par in zip(param_names, params):
            final_params[nam] = par
    response = await put_distribution(telegram_id=message.from_user.id, distribution_id=id, name=name, distribution_type=distribution_type, distribution_parameters=final_params)
    if not response:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", reply_markup=inline_keyboards.main)
        return
    await message.answer("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup= await get_distributions_catalogue(telegram_id = message.from_user.id))
    await state.clear()

#===========================================================================================================================
# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–¥–µ–ª–µ–Ω–∏—è 
#===========================================================================================================================

@router.callback_query(F.data.startswith("delete_distribution_"))
async def distribution_delete_callback_admin(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    category_id = callback.data.split("_")[2]
    response = await delete_distribution(telegram_id=callback.from_user.id, distribution_id=category_id)
    if not response:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", reply_markup=inline_keyboards.main)
        return
    await callback.message.answer("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=await get_distributions_catalogue(telegram_id = callback.from_user.id))
    await state.clear()
    await build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="delete_distribution"
    )

#===========================================================================================================================
# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞
#===========================================================================================================================

@router.callback_query(F.data == "create_dataset")
async def dataset_create_callback(callback: CallbackQuery, state: FSMContext):
    await build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="create_dataset"
    )
    await state.clear()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞")
    await state.set_state(Dataset.name)
    await callback.answer()


@router.message(Dataset.name)
async def load_dataset(message: Message, state: FSMContext):
    await state.set_state(Dataset.file)
    name = (message.text).strip()
    await state.update_data(name = name)
    await message.answer("–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–∞–π–ª CSV —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º")



@router.message(F.document, Dataset.file)
async def get_dataset_file_message(message: Message, state: FSMContext, bot:Bot):
    try:
        data = await state.get_data()
        file_id = message.document.file_id
        file_name = message.document.file_name
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_bytes = await bot.download_file(file_path)
        buffer = io.BytesIO()
        buffer.write(file_bytes.read())
        buffer.seek(0)  
        result = await post_dataset(telegram_id=message.from_user.id, name=data.get("name", file_name), csv_buffer=buffer)
        if not result:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞", reply_markup=await inline_keyboards.get_datasets_catalogue(telegram_id=message.from_user.id))
        else:
            await message.answer("–î–∞—Ç–∞—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!", reply_markup=await inline_keyboards.get_datasets_catalogue(telegram_id=message.from_user.id))
        await state.clear()
    except Exception as e:
        logging.exception(e)
        logging.error("Error while loading the dataset")


#===========================================================================================================================
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞
#===========================================================================================================================

@router.callback_query(F.data.startswith("edit_dataset"))
async def dataset_edit_callback(callback: CallbackQuery, state: FSMContext):
    dataset_id = callback.data.strip().split("_")[2]
    await build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="edit_dataset"
    )
    await state.clear()
    await state.update_data(id = dataset_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞")
    await state.set_state(DatasetEdit.name)
    await callback.answer()


@router.message(DatasetEdit.name)
async def edit_load_dataset(message: Message, state: FSMContext):
    await state.set_state(DatasetEdit.file)
    name = (message.text).strip()
    await state.update_data(name = name)
    await message.answer("–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–∞–π–ª CSV —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º")



@router.message(F.document, DatasetEdit.file)
async def get_dataset_file_msg(message: Message, state: FSMContext, bot:Bot):
    try:
        data = await state.get_data()
        dataset_id = data.get("id")
        if not dataset_id:
            raise ValueError("Error while loading dataset id")
        file_id = message.document.file_id
        file_name = message.document.file_name
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_bytes = await bot.download_file(file_path)
        buffer = io.BytesIO()
        buffer.write(file_bytes.read())
        buffer.seek(0)  
        result = await put_dataset(telegram_id=message.from_user.id, dataset_id=dataset_id, name=data.get("name", file_name), csv_buffer=buffer)
        if not result:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞", reply_markup=await inline_keyboards.get_datasets_catalogue(telegram_id=message.from_user.id))
        else:
            await message.answer("–î–∞—Ç–∞—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!", reply_markup=await inline_keyboards.get_datasets_catalogue(telegram_id=message.from_user.id))
        await state.clear()
    except Exception as e:
        logging.exception(e)
        logging.error("Error while loading the dataset")

#===========================================================================================================================
# –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞
#===========================================================================================================================

@router.callback_query(F.data.startswith("delete_dataset_"))
async def dataset_delete_callback_admin(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    category_id = callback.data.split("_")[2]
    response = await delete_dataset(telegram_id=callback.from_user.id, dataset_id=category_id)
    if not response:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å dataset", reply_markup=inline_keyboards.main)
        return
    await callback.message.answer("–î–∞—Ç–∞—Å–µ—Ç —É–¥–∞–ª–µ–Ω!", reply_markup=await get_distributions_catalogue(telegram_id = callback.from_user.id))
    await state.clear()
    await build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="delete_dataset"
    )
