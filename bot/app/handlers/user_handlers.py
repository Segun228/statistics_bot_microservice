from app.handlers.router import admin_router as router
import logging
import re
import zipfile
import io
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram import F
from typing import Dict, Any
from aiogram.fsm.context import FSMContext
from aiogram import Router, Bot
from aiogram.exceptions import TelegramAPIError
from io import BytesIO
import asyncio

from aiogram.types import InputFile

from app.keyboards import inline_user as inline_keyboards

from app.states.states import Unit, Set, Send, File, UnitEdit, Cohort, SetCohort

from aiogram.types import BufferedInputFile


from app.keyboards.inline_user import get_catalogue, get_posts

from app.filters.IsAdmin import IsAdmin

from app.requests.user.login import login
from app.requests.helpers.get_cat_error import get_cat_error_async
from app.requests.get.get_sets import get_sets, retrieve_set
from app.requests.get.get_post import get_post

from app.requests.helpers.get_cat_error import get_cat_error_async

from app.requests.post.postCategory import post_set
from app.requests.post.postPost import post_post
from app.requests.put.putCategory import put_set
from app.requests.put.putPost import put_post
from app.requests.delete.deleteCategory import delete_category
from app.requests.delete.deletePost import delete_post
from app.requests.user.get_alive import get_alive
from app.requests.user.make_admin import make_admin

from app.requests.files.get_report import get_report
from app.requests.files.put_report import put_report

from app.requests.units import get_unit_report, get_unit_bep, get_unit_exel
from app.requests.put import update_model_cohort_data
from app.requests.units.get_unit_cohort import get_unit_cohort

from app.requests.sets.set_generate_report import set_generate_report
from app.requests.sets.set_visualize import set_visualize
from app.requests.sets.get_set_cohort import get_set_cohort


from app.kafka.utils import build_log_message

from app.requests.sets.set_text_report import set_text_report
#===========================================================================================================================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
#===========================================================================================================================


@router.message(CommandStart(), IsAdmin())
async def cmd_start_admin(message: Message, state: FSMContext):
    data = await login(telegram_id=message.from_user.id)
    if data is None:
        logging.error("Error while logging in")
        await message.answer("–ë–æ—Ç –µ—â–µ –Ω–µ –ø—Ä–æ—Å–Ω—É–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å üòî", reply_markup=inline_keyboards.restart)
        return
    await state.update_data(telegram_id = data.get("telegram_id"))
    await message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –ê–¥–º–∏–Ω! üëã")
    await message.answer("–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫—É –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞–ø–∞, –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç—É–≥–∏—é, –∞ —Ç–∞–∫–∂–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å (—á—Ç–æ–± –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –≤–∞—Å –Ω–µ —Å—ä–µ–ª–∏)")
    await message.answer("–°–µ–π—á–∞—Å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å –∫–∞–∫ –Ω–∞–±–æ—Ä—ã –º–æ–¥–µ–ª–µ–π (–ø—Ä–æ–≥—Ä–∞–º–º—ã), —Ç–∞–∫ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏")
    await message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await state.clear()
    build_log_message(
        telegram_id=message.from_user.id,
        action="command",
        source="command",
        payload="start"
    )


@router.callback_query(F.data == "restart")
async def callback_start_admin(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    data = await login(telegram_id=callback.from_user.id)
    if data is None:
        logging.error("Error while logging in")
        await callback.message.answer("–ë–æ—Ç –µ—â–µ –Ω–µ –ø—Ä–æ—Å–Ω—É–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å üòî", reply_markup=inline_keyboards.restart)
        return
    await state.update_data(telegram_id = data.get("telegram_id"))
    await callback.message.reply("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! üëã")
    await callback.message.answer("–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫—É –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞–ø–∞, –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç—É–≥–∏—é, –∞ —Ç–∞–∫–∂–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å (—á—Ç–æ–± –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –≤–∞—Å –Ω–µ —Å—ä–µ–ª–∏)")
    await callback.message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await callback.answer()
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="restart"
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    build_log_message(
        telegram_id=message.from_user.id,
        action="command",
        source="command",
        payload="help"
    )
    await message.reply(text="–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —é–Ω–∏—Ç —ç–∫–æ–Ω–æ–º–∏–∫—É, –ø–æ–¥–±–∏—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –∏–ª–∏ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª-–≤–æ —é–Ω–∏—Ç–æ–≤ –∏ —Ç–æ—á–∫—É –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏\n\n –û–Ω –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π \n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ñ—É–Ω–∫—Ü–∏–∏, –≤ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö –≤–∞–º –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –∏–ª–∏ –ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É, –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏:\n\n—Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞\n\n@dianabol_metandienon_enjoyer", reply_markup=inline_keyboards.home)

@router.message(Command("contacts"))
async def cmd_contacts(message: Message):
    build_log_message(
        telegram_id=message.from_user.id,
        action="command",
        source="command",
        payload="contacts"
    )
    text = "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: üìû\n\n\\—Ç—É—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞\n\n"+"–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ–º: üìû\n\n\\@dianabol\\_metandienon\\_–µ–Ωjoyer ü§ù"
    await message.reply(text=text, reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')

@router.callback_query(F.data == "contacts")
async def contacts_callback(callback: CallbackQuery):
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="menu",
        payload="contacts"
    )
    text = "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: üìû\n\n\\—Ç—É—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞\n\n"+"–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ–º: üìû\n\n\\@dianabol\\_metandienon\\_enjoyer ü§ù"
    await callback.message.edit_text(text=text, reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="menu",
        payload="main_menu"
    )
    await callback.message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await callback.answer()

#===========================================================================================================================
# –ö–∞—Ç–∞–ª–æ–≥
#===========================================================================================================================
@router.callback_query(F.data == "catalogue")
async def catalogue_callback_admin(callback: CallbackQuery):
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="menu",
        payload="catalogue"
    )
    categories = await get_sets(telegram_id=callback.from_user.id)
    await callback.message.answer("–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã (–Ω–∞–±–æ—Ä—ã –º–æ–¥–µ–ª–µ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏)üëá", reply_markup= await get_catalogue(categories=categories, telegram_id=callback.from_user.id))
    await callback.answer()


@router.callback_query(F.data.startswith("category_"))
async def category_catalogue_callback_admin(callback: CallbackQuery):
    await callback.answer()
    category_id = callback.data.split("_")[1]
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="menu",
        payload=f"category_{category_id}"
    )
    categories = await get_sets(telegram_id=callback.from_user.id)
    current_category = None
    if categories is not None:
        for category in categories:
            if str(category.get("id")) == str(category_id):
                current_category = category
                break
    
    if current_category is None or current_category.get("units") is None or current_category.get("units") == []:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç—É—Ç –ø–æ–∫–∞ –ø—É—Å—Ç–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–π—Ç–µ—Å—å –ø–æ–∑–∂–µ!", reply_markup= await get_posts(posts=current_category.get("units"), category=current_category ))
        await callback.answer()
        return
    await callback.message.answer("–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏üëá", reply_markup= await get_posts(category= current_category ,posts = current_category.get("units", [])))


@router.callback_query(F.data.startswith("post_"))
async def post_catalogue_callback_admin(callback: CallbackQuery):
    await callback.answer()
    post_id = callback.data.split("_")[2]
    category_id = callback.data.split("_")[1]
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="menu",
        payload=f"post_{post_id}"
    )
    post_data = await get_post(
        telegram_id=callback.from_user.id,
        post_id=post_id,
        category_id=category_id
    )
    if not post_data:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–∑–∏—Ü–∏–∏", reply_markup=inline_keyboards.home)
        return

    message_text = (
        f"üì¶ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —é–Ω–∏—Ç–µ:**\n\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** `{post_data.get('name')}`\n"
        f"**Users:** `{post_data.get('users')}`\n"
        f"**Customers:** `{post_data.get('customers')}`\n"
        f"**AVP:** `{post_data.get('AVP')}`\n"
        f"**APC:** `{post_data.get('APC')}`\n"
        f"**TMS:** `{post_data.get('TMS')}`\n"
        f"**COGS:** `{post_data.get('COGS')}`\n"
        f"**COGS1s:** `{post_data.get('COGS1s')}`\n"
        f"**FC:** `{post_data.get('FC')}`\n"
    )

    await callback.message.answer(
        text=message_text,
        parse_mode="MarkdownV2",
        reply_markup=await inline_keyboards.get_post_menu(
            category_id=category_id,
            post_id=post_id,
        )
    )

#===========================================================================================================================
# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∞
#===========================================================================================================================


@router.callback_query(F.data == "create_category")
async def category_create_callback_admin(callback: CallbackQuery, state: FSMContext):
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="create_category"
    )
    await state.clear()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏")
    await state.set_state(Set.handle_set)
    await callback.answer()


@router.message(Set.handle_set)
async def category_create_callback_admin_description(message: Message, state: FSMContext):
    name = (message.text).strip()
    await state.update_data(name = name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏")
    await state.set_state(Set.description)


@router.message(Set.description)
async def category_enter_name_admin(message: Message, state: FSMContext):
    description = (message.text).strip()
    data = await state.get_data()
    name = data.get("name")
    response = await post_set(telegram_id=message.from_user.id, name=name, description= description)
    if not response:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Ä –º–æ–¥–µ–ª–µ–π", reply_markup=inline_keyboards.main)
        return
    await message.answer("–ù–∞–±–æ—Ä –º–æ–¥–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω!", reply_markup= await get_catalogue(telegram_id = message.from_user.id))
    await state.clear()


#===========================================================================================================================
# –°–æ–∑–¥–∞–Ω–∏–µ —é–Ω–∏—Ç–∞
#===========================================================================================================================
@router.callback_query(F.data.startswith("create_post_"))
async def post_create_callback_admin(callback: CallbackQuery, state: FSMContext):
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="create_unit"
    )
    await callback.answer()
    await state.clear()
    category_id = callback.data.split("_")[2]
    await state.update_data(model_set=category_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    await state.set_state(Unit.name)


@router.message(Unit.name)
async def post_enter_name_admin(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏")
        return
    await state.update_data(name=name)
    await state.set_state(Unit.users)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


@router.message(Unit.users)
async def post_enter_description_admin(message: Message, state: FSMContext):
    users = message.text.strip()
    if not users.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    await state.update_data(users=int(users))
    await state.set_state(Unit.customers)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")


@router.message(Unit.customers)
async def post_enter_price_admin(message: Message, state: FSMContext):
    customers = message.text.strip()
    if not customers.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return
    await state.update_data(customers=int(customers))
    await state.set_state(Unit.AVP)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ AVP (Average Value of Payment)")


@router.message(Unit.AVP)
async def post_enter_country_admin(message: Message, state: FSMContext):
    avp = message.text.strip()
    if not avp.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ AVP (Average Value of Payment)")
        return
    await state.update_data(AVP=int(avp))
    await state.set_state(Unit.APC)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ APC (Average Purchase Count)")


@router.message(Unit.APC)
async def post_enter_apc_admin(message: Message, state: FSMContext):
    apc = message.text.strip()
    if not apc.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ APC (Average Purchase Count)")
        return
    await state.update_data(APC=int(apc))
    await state.set_state(Unit.TMS)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ TMS (Total Marketing Spends)")


@router.message(Unit.TMS)
async def post_enter_tms_admin(message: Message, state: FSMContext):
    tms = message.text.strip()
    if not tms.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ TMS (Total Marketing Spends)")
        return
    await state.update_data(TMS=int(tms))
    await state.set_state(Unit.COGS)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ COGS (Cost of goods sold)")


@router.message(Unit.COGS)
async def post_enter_cogs_admin(message: Message, state: FSMContext):
    cogs = message.text.strip()
    if not cogs.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ COGS (Cost of goods sold)")
        return
    await state.update_data(COGS=int(cogs))
    await state.set_state(Unit.COGS1s)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ COGS1s (Cost of goods sold first sale)")


@router.message(Unit.COGS1s)
async def post_enter_cogs1s_admin(message: Message, state: FSMContext):
    cogs1s = message.text.strip()
    if not cogs1s.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ COGS1s (Cost of goods sold first sale)")
        return
    await state.update_data(COGS1s=int(cogs1s))
    await state.set_state(Unit.FC)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ FC (Fixed Costs)")


@router.message(Unit.FC)
async def post_enter_fc_admin(message: Message, state: FSMContext):
    fc = message.text.strip()
    if not fc.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ FC (Fixed Costs)")
        return

    await state.update_data(FC=int(fc))
    data = await state.get_data()
    unit_data = await post_post(
        telegram_id=message.from_user.id,
        category_id=data.get("model_set"),
        name=data.get("name"),
        users=data.get("users"),
        customers=data.get("customers"),
        AVP=data.get("AVP"),
        APC=data.get("APC"),
        TMS=data.get("TMS"),
        COGS=data.get("COGS"),
        COGS1s=data.get("COGS1s"),
        FC=data.get("FC"),
    )
    if not unit_data:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —é–Ω–∏—Ç–∞", reply_markup=await get_catalogue(message.from_user.id))
        return

    msg = (
        f"üß© **–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:**\n\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** `{unit_data.get('name')}`\n"
        f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** `{unit_data.get('users')}`\n"
        f"**–ö–ª–∏–µ–Ω—Ç—ã:** `{unit_data.get('customers')}`\n"
        f"**AVP:** `{unit_data.get('AVP')}`\n"
        f"**APC:** `{unit_data.get('APC')}`\n"
        f"**TMS:** `{unit_data.get('TMS')}`\n"
        f"**COGS:** `{unit_data.get('COGS')}`\n"
        f"**COGS1s:** `{unit_data.get('COGS1s')}`\n"
        f"**FC:** `{unit_data.get('FC')}`"
    )
    await message.answer(msg, parse_mode="MarkdownV2", reply_markup=await inline_keyboards.get_post_menu(category_id=data.get("model_set"), post_id=unit_data.get("id")))
    await state.clear()

#===========================================================================================================================
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∞
#===========================================================================================================================
@router.callback_query(F.data.startswith("edit_category_"))
async def category_edit_callback_admin(callback: CallbackQuery, state: FSMContext):
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="edit_set"
    )
    await callback.answer()
    await state.clear()
    category_id = callback.data.split("_")[2]
    await state.set_state(Set.handle_edit_set)
    await state.update_data(category_id = category_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∞")


@router.message(Set.handle_edit_set)
async def category_edit_callback_admin_description(message: Message, state: FSMContext):
    name = (message.text).strip()
    await state.update_data(name = name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏")
    await state.set_state(Set.edit_description)


@router.message(Set.edit_description)
async def category_edit_name_admin(message: Message, state: FSMContext):
    data = await state.get_data()
    category_id = data.get("category_id")
    name = data.get("name")
    description = (message.text).strip()
    response = await put_set(telegram_id=message.from_user.id, name=name, category_id=category_id, description=description)
    if not response:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç", reply_markup=inline_keyboards.main)
        return
    await message.answer("–°–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!", reply_markup=await get_catalogue(telegram_id = message.from_user.id))
    await state.clear()

#===========================================================================================================================
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
#===========================================================================================================================
@router.callback_query(F.data.startswith("edit_post_"))
async def post_edit_callback_admin(callback: CallbackQuery, state: FSMContext):
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="edit_post"
    )
    await callback.answer()
    await state.clear()
    category_id, unit_id = callback.data.split("_")[2:]
    await state.update_data(category_id=category_id)
    await state.update_data(post_id=unit_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    await state.set_state(UnitEdit.handle_edit_unit)


@router.message(UnitEdit.handle_edit_unit)
async def post_edit_name_admin(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏")
        return
    await state.update_data(name=name)
    await state.set_state(UnitEdit.users)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ users")


@router.message(UnitEdit.users)
async def post_edit_users_admin(message: Message, state: FSMContext):
    users = message.text.strip()
    if not users.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    await state.update_data(users=int(users))
    await state.set_state(UnitEdit.customers)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ customers")


@router.message(UnitEdit.customers)
async def post_edit_customers_admin(message: Message, state: FSMContext):
    customers = message.text.strip()
    if not customers.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ –∫–ª–∏–µ–Ω—Ç–æ–≤")
        return
    await state.update_data(customers=int(customers))
    await state.set_state(UnitEdit.AVP)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ AVP")


@router.message(UnitEdit.AVP)
async def post_edit_avp_admin(message: Message, state: FSMContext):
    avp = message.text.strip()
    if not avp.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ AVP")
        return
    await state.update_data(AVP=int(avp))
    await state.set_state(UnitEdit.APC)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ APC")


@router.message(UnitEdit.APC)
async def post_edit_apc_admin(message: Message, state: FSMContext):
    apc = message.text.strip()
    if not apc.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ APC")
        return
    await state.update_data(APC=int(apc))
    await state.set_state(UnitEdit.TMS)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ TMS")


@router.message(UnitEdit.TMS)
async def post_edit_tms_admin(message: Message, state: FSMContext):
    tms = message.text.strip()
    if not tms.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ TMS")
        return
    await state.update_data(TMS=int(tms))
    await state.set_state(UnitEdit.COGS)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ COGS")


@router.message(UnitEdit.COGS)
async def post_edit_cogs_admin(message: Message, state: FSMContext):
    cogs = message.text.strip()
    if not cogs.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ COGS")
        return
    await state.update_data(COGS=int(cogs))
    await state.set_state(UnitEdit.COGS1s)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ COGS1s")


@router.message(UnitEdit.COGS1s)
async def post_edit_cogs1s_admin(message: Message, state: FSMContext):
    cogs1s = message.text.strip()
    if not cogs1s.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ COGS1s")
        return
    await state.update_data(COGS1s=int(cogs1s))
    await state.set_state(UnitEdit.FC)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ FC")


@router.message(UnitEdit.FC)
async def post_edit_fc_admin(message: Message, state: FSMContext):
    fc = message.text.strip()
    if not fc.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ FC")
        return

    data = await state.get_data()
    logging.warning(f"DATA: {data}")
    unit_data = await put_post(
        telegram_id=message.from_user.id,
        category_id=data.get("category_id"),
        name=data.get("name"),
        users=data.get("users"),
        customers=data.get("customers"),
        AVP=data.get("AVP"),
        APC=data.get("APC"),
        TMS=data.get("TMS"),
        COGS=data.get("COGS"),
        COGS1s=data.get("COGS1s"),
        FC=int(fc),
        post_id=data.get("post_id")
    )

    if not unit_data:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏", reply_markup=await get_catalogue(telegram_id=message.from_user.id))
        return

    await message.answer("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    message_text = (
        f"üîß **–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –º–æ–¥–µ–ª—å:**\n\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** `{unit_data.get('name')}`\n"
        f"**Users:** `{unit_data.get('users')}`\n"
        f"**Customers:** `{unit_data.get('customers')}`\n"
        f"**AVP:** `{unit_data.get('AVP')}`\n"
        f"**APC:** `{unit_data.get('APC')}`\n"
        f"**TMS:** `{unit_data.get('TMS')}`\n"
        f"**COGS:** `{unit_data.get('COGS')}`\n"
        f"**COGS1s:** `{unit_data.get('COGS1s')}`\n"
        f"**FC:** `{unit_data.get('FC')}`"
    )

    await message.answer(
        message_text,
        reply_markup=await inline_keyboards.get_post_menu(
            category_id=data.get("category_id"),
            post_id=data.get("post_id")
        ),
        parse_mode="MarkdownV2"
    )
    await state.clear()
#===========================================================================================================================
# –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ç–∞   
#===========================================================================================================================

@router.callback_query(F.data.startswith("delete_category_"))
async def category_delete_callback_admin(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    category_id = callback.data.split("_")[2]
    response = await delete_category(telegram_id=callback.from_user.id, category_id=category_id)
    if not response:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=inline_keyboards.main)
        return
    await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞!", reply_markup=await get_catalogue(telegram_id = callback.from_user.id))
    await state.clear()
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="delete_set"
    )


#===========================================================================================================================
# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
#===========================================================================================================================

@router.callback_query(F.data.startswith("delete_post_"))
async def post_delete_callback_admin(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    catergory_id, post_id = callback.data.split("_")[2:]
    response = await delete_post(telegram_id=callback.from_user.id, category_id=catergory_id, post_id=post_id)
    if not response:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç",reply_markup= await get_catalogue(telegram_id = callback.from_user.id))
    await callback.message.answer("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",reply_markup=await get_catalogue(telegram_id = callback.from_user.id))
    await state.clear()
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="delete_post"
    )


#===========================================================================================================================
# –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
#===========================================================================================================================


@router.callback_query(F.data.startswith("access_give"))
async def give_acess_admin(callback: CallbackQuery, state: FSMContext, bot:Bot):
    request = str(callback.data)
    try:
        user_id = list(request.split("_"))[2]
        if not user_id:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞")
            return
        response = await make_admin(
            telegram_id= callback.from_user.id,
            target_user_id= user_id
        )
        if not response:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞")
            await bot.send_message(chat_id=int(user_id), text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=inline_keyboards.home)
        else:
            logging.info(response)
            await callback.message.answer("–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã", reply_markup=inline_keyboards.home)
            await bot.send_message(chat_id=user_id, text="–í–∞–º –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=inline_keyboards.home)
    except Exception as e:
        logging.error(e)


@router.callback_query(F.data.startswith("access_reject"))
async def reject_acess_admin(callback: CallbackQuery, state: FSMContext, bot:Bot):
    request = str(callback.data)
    try:
        user_id = list(request.split("_"))[2]
        await bot.send_message(chat_id=int(user_id), text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=inline_keyboards.home)
    except Exception as e:
        logging.error(e)
    finally:
        await state.clear()

#===========================================================================================================================
# –§–∞–π–ª–æ–≤–æ–µ –º–µ–Ω—é
#===========================================================================================================================


@router.callback_query(F.data == "file_panel")
async def file_panel_admin(callback: CallbackQuery, state: FSMContext, bot:Bot):
    await state.clear()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é",
        reply_markup= inline_keyboards.file_panel
    )


@router.callback_query(F.data == "get_report")
async def send_report_admin(callback: CallbackQuery, state: FSMContext, bot: Bot):

    await callback.answer("–ì–æ—Ç–æ–≤–ª—é –≤–∞—à –æ—Ç—á—ë—Ç...", show_alert=False)
    docs = await get_report(telegram_id=callback.from_user.id)

    if not docs:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    await callback.message.answer(
        "–í–æ—Ç –≤–∞—à –æ—Ç—á—ë—Ç!"
    )

    await bot.send_document(
        chat_id=callback.message.chat.id,
        document=BufferedInputFile(docs.getvalue(), filename="report.xlsx"),
        reply_markup=inline_keyboards.file_panel
    )
    await state.clear()
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="get_xlsx"
    )



@router.callback_query(F.data == "add_posts")
async def file_add_posts_admin(callback: CallbackQuery, state: FSMContext, bot:Bot):
    
    await callback.message.answer(
        "–≠—Ç–æ —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏"
    )
    docs = await get_report(telegram_id=callback.from_user.id)
    await bot.send_document(
        chat_id=callback.message.chat.id,
        document=BufferedInputFile(docs.getvalue(), filename="report.xlsx"),
    )
    await callback.message.answer(
        "–í—ã –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä. –û—Ç–ø—Ä–∞–≤—Ç–µ –≤ —á–∞—Ç —Ñ–∞–π–ª —Å –ø–æ–∑–∏—Ü–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"
    )
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    )
    await state.set_state(File.waiting_for_name)
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="post_xlsx"
    )


@router.message(File.waiting_for_name)
async def upload_file_admin(message: Message, state: FSMContext, bot: Bot):
    name = message.text
    await state.update_data(name = name)
    await state.set_state(File.waiting_for_file)
    await message.answer("–û—Ç–ø—Ä–∞–≤—Ç–µ –±–æ—Ç—É —Ñ–∞–π–ª")


@router.message(File.waiting_for_file)
async def upload_add_file_admin(message: Message, state: FSMContext, bot: Bot):
    try:
        file = await bot.get_file(message.document.file_id)
        data = await state.get_data()
        name = data.get("name", "New set")
        file_bytes = await bot.download_file(file.file_path)
        response = await put_report(message.from_user.id, file_bytes, name=name)
        if not response:
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É."
            )
            await state.clear()
            return
        await message.answer("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!", reply_markup= inline_keyboards.file_panel)
        await state.clear()

    except Exception as e:
        await state.clear()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Excel (.xlsx).", reply_markup= inline_keyboards.file_panel)
    finally:
        await state.clear()





#==============================================================================================================================================================================================
# Unit analysis
#==============================================================================================================================================================================================


@router.callback_query(F.data.startswith("analise_unit"))
async def analyse_unit_menu(callback: CallbackQuery, state: FSMContext, bot:Bot):
    try:
        await state.clear()
        set_id, unit_id = callback.data.split("_")[2:]
        await callback.message.answer(
            "–ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏",
            reply_markup= await inline_keyboards.create_unit_edit_menu(set_id, unit_id)
        )
    except Exception as e:
        logging.error(e)
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∏–∑–≤–∏–Ω–∏—Ç–µ", reply_markup= inline_keyboards.main)
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="analize_unit_menu"
    )

def escape_md_v2(text: str) -> str:
    if text is None:
        return ""
    text = str(text)
    escape_chars = r"_*[]()~`>#+-=|{}.!\\"
    return re.sub(f"([{re.escape(escape_chars)}])", r'\\\1', text)

def format_unit_report(data: dict) -> str:
    get = lambda key: escape_md_v2(data.get(key))
    return f"""
üìä *–û—Ç—á–µ—Ç –ø–æ —é–Ω–∏—Ç\\-—ç–∫–æ–Ω–æ–º–∏–∫–µ*

*–ù–∞–∑–≤–∞–Ω–∏–µ:* `{get('name')}`
*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* `{get('users')}`
*–ö–ª–∏–µ–Ω—Ç—ã:* `{get('customers')}`
*AVP:* `{get('AVP')}`
*APC:* `{get('APC')}`
*TMS:* `{get('TMS')}`
*COGS:* `{get('COGS')}`
*COGS1s:* `{get('COGS1s')}`
*FC:* `{get('FC')}`

üî¢ *–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:*
\\- C1 \\(–∫–æ–Ω–≤–µ—Ä—Å–∏—è\\): {get("C1")}
\\- ARPC \\(–¥–æ—Ö–æ–¥ —Å –∫–ª–∏–µ–Ω—Ç–∞\\): {get("ARPC")}
\\- ARPU \\(–¥–æ—Ö–æ–¥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\): {get("ARPU")}
\\- CPA \\(—Ü–µ–Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\): {get("CPA")}
\\- CAC \\(—Ü–µ–Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞\\): {get("CAC")}

üí∞ *–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:*
\\- CLTV \\(–ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\\): {get("CLTV")}
\\- LTV \\(—Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º C1\\): {get("LTV")}
\\- ROI: {get("ROI")} \\%
\\- UCM \\(—é–Ω–∏—Ç\\-contrib\\-–º–∞—Ä–∂–∞\\): {get("UCM")}
\\- CCM \\(–∫–ª–∏–µ–Ω—Ç\\-contrib\\-–º–∞—Ä–∂–∞\\): {get("CCM")}

üìà *–í—ã—Ä—É—á–∫–∞ –∏ –ø—Ä–∏–±—ã–ª—å:*
\\- Revenue \\(–≤—ã—Ä—É—á–∫–∞\\): {get("Revenue")}
\\- Gross Profit \\(–≤–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å\\): {get("Gross_profit")}
\\- Margin \\(–º–∞—Ä–∂–∞\\): {get("Margin")}
\\- FC \\(–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏\\): {get("FC")}
\\- Profit \\(–ø—Ä–∏–±—ã–ª—å\\): {get("Profit")}

‚öñÔ∏è *–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å:*
\\- –¢—Ä–µ–±—É–µ—Ç—Å—è —é–Ω–∏—Ç–æ–≤ –¥–æ BEP: {get("Required_units_to_BEP")}
\\- BEP \\(—Ç–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏\\): {get("BEP")}

üìå *–ü—Ä–∏–±—ã–ª—å–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å:* {"‚úÖ –î–∞" if data.get("CCM", 0)>0 else "‚ùå –ù–µ—Ç"}
""".strip()


def format_bep_report(data: dict) -> str:
    get = lambda key: escape_md_v2(data.get(key, "Undefined"))
    return f"""
üìä *–û—Ç—á–µ—Ç –æ —Ç–æ—á–∫–µ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏*

üí∞ *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏:*
*–ù–∞–∑–≤–∞–Ω–∏–µ:* `{get('name')}`
*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* `{get('users')}`
*–ö–ª–∏–µ–Ω—Ç—ã:* `{get('customers')}`
*AVP:* `{get('AVP')}`
*APC:* `{get('APC')}`
*TMS:* `{get('TMS')}`
*COGS:* `{get('COGS')}`
*COGS1s:* `{get('COGS1s')}`
*FC:* `{get('FC')}`


üí∞ *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç –º–æ–¥–µ–ª–∏:*
\\- CCM \\(–∫–ª–∏–µ–Ω—Ç\\-contrib\\-–º–∞—Ä–∂–∞\\): {get("CCM")}
\\- FC \\(–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏\\): {get("FC")}

‚öñÔ∏è *–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å:*
\\- –¢—Ä–µ–±—É–µ—Ç—Å—è —é–Ω–∏—Ç–æ–≤ –¥–æ BEP: {get("Required_units_to_BEP")}
\\- BEP \\(—Ç–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏\\): {get("BEP")}

üìå *–ü—Ä–∏–±—ã–ª—å–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å:* {"‚úÖ –î–∞" if data.get("CCM", 0)>0 else "‚ùå –ù–µ—Ç"}
""".strip()

@router.callback_query(F.data.startswith("count_unit_economics_"))
async def count_unit_economics(callback: CallbackQuery, state: FSMContext, bot:Bot):
    try:
        print(callback.data.split("_")[2:])
        set_id, unit_id = callback.data.split("_")[3:]
        analysis = await get_unit_report.get_unit_report(
            telegram_id=callback.from_user.id,
            unit_id=unit_id
        )
        if not analysis:
            raise ValueError("Error while generating report")

        await callback.message.answer(
            format_unit_report(analysis[0]),
            reply_markup = inline_keyboards.main,
            parse_mode="MarkdownV2"
        )
    except Exception as e:
        logging.error(e)
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏", reply_markup= inline_keyboards.main)
    finally:
        await state.clear()
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="count_unit_economics"
    )
#==============================================================================================================================================================================================
# Count unit BEP
#==============================================================================================================================================================================================


@router.callback_query(F.data.startswith("count_unit_bep"))
async def count_unit_bep(callback: CallbackQuery, state: FSMContext, bot:Bot):
    try:
        await state.clear()
        set_id, model_id = callback.data.split("_")[3:]
        await callback.answer()

        analysis = await get_unit_report.get_unit_report(
            telegram_id=callback.from_user.id,
            unit_id=model_id
        )

        if not analysis:
            logging.error("Failed to get report")
            await callback.message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö üòî",
                reply_markup=inline_keyboards.main)
            await callback.answer()
            return
        analysis = analysis[0]

        if not analysis.get("Required_units_to_BEP") or analysis.get("UCM")<=0:
            await callback.message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —É–±—ã—Ç–æ—á–Ω–∞",
            )
            await callback.message.answer(
                "–¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–∞",
            )
            await callback.message.answer(
                format_bep_report(analysis),
                reply_markup=inline_keyboards.main,
                parse_mode = "MarkdownV2"
            )
            await callback.answer()
            return

        image_bytes_list = await get_unit_bep.get_unit_bep(telegram_id=callback.from_user.id, unit_id=model_id)

        if not image_bytes_list:
            logging.error("Failed to get visual report images from API.")
            await callback.message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö üòî",
                reply_markup=inline_keyboards.main)
            await callback.answer()
            return
        
        first_photo = BufferedInputFile(image_bytes_list[0], filename="report_1.png")
        caption_text = "üìä –í–æ—Ç –≤–∞—à –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ —Ç–æ—á–∫–µ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏! üìà"
        analysis = await get_unit_report.get_unit_report(
            telegram_id=callback.from_user.id,
            unit_id=model_id
        )
        if not analysis:
            raise ValueError("Error while generating report")
        await callback.message.answer_photo(
            photo=first_photo,
            caption=caption_text
        )

        for ind, photo_bytes in enumerate(image_bytes_list[1:], start=2):
            if photo_bytes is None:
                continue
            photo_file = BufferedInputFile(photo_bytes, filename=f"report_{ind}.png")
            await callback.message.answer_photo(
                photo=photo_file
            )

        await callback.message.answer(
            format_bep_report(analysis[0]),
            reply_markup=inline_keyboards.main,
            parse_mode = "MarkdownV2"
        )
    except Exception as e:
        logging.error(e)
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–∫—É –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏", reply_markup= inline_keyboards.main)
    finally:
        await state.clear()
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="count_unit_bep"
    )

#==============================================================================================================================================================================================
# Generate unit report
#==============================================================================================================================================================================================

@router.callback_query(F.data.startswith("generate_report_unit"))
async def generate_unit_report(callback: CallbackQuery, state: FSMContext, bot:Bot):
    try:
        await state.clear()
        set_id, model_id = callback.data.split("_")[3:]
        await callback.answer()

        analysis = await get_unit_report.get_unit_report(
            telegram_id=callback.from_user.id,
            unit_id=model_id
        )

        if not analysis:
            logging.error("Failed to get report")
            await callback.message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö üòî",
                reply_markup=inline_keyboards.main)
            await callback.answer()
            return
        analysis = analysis[0]


        await callback.answer("–ì–æ—Ç–æ–≤–ª—é –≤–∞—à –æ—Ç—á—ë—Ç...", show_alert=False)
        docs = await get_unit_exel.get_unit_exel(telegram_id=callback.from_user.id, unit_id=model_id)

        if not docs:
            await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return

        await callback.message.answer(
            "–í–æ—Ç –≤–∞—à –æ—Ç—á—ë—Ç!"
        )

        await bot.send_document(
            chat_id=callback.message.chat.id,
            document=BufferedInputFile(docs.getvalue(), filename="report.xlsx"),
            reply_markup=inline_keyboards.main
        )
        await state.clear()


    except Exception as e:
        logging.error(e)
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–∫—É –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏", reply_markup= inline_keyboards.main)
    finally:
        await state.clear()
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="count_bep_unit"
    )


#===========================================================================================================================
# Unit –ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
#===========================================================================================================================

@router.callback_query(F.data.startswith("cohort_analisis_"))
async def start_cohort_analisis(callback: CallbackQuery, state: FSMContext, bot:Bot):
    try:
        await state.clear()
        set_id, model_id = callback.data.split("_")[2:]
        await callback.answer()
        await state.set_state(Cohort.handle_unit)
        await state.update_data(set_id = set_id)
        await state.update_data(model_id = model_id)

        """
        analysis = await get_unit_report.get_unit_report(
            telegram_id=callback.from_user.id,
            unit_id=model_id
        )
        if not analysis:
            logging.error("Failed to get report")
            await callback.message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö üòî",
                reply_markup=inline_keyboards.main)
            await callback.answer()
            return
        analysis = analysis[0]
        """
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (retention rate, %)")
    except Exception as e:
        logging.error(e)
        await callback.message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ", reply_markup= inline_keyboards.main)


@router.message(Cohort.handle_unit)
async def continue_cohort_analisis(message:Message, state: FSMContext, bot:Bot):
    retention = message.text
    try:
        if not retention:
            raise ValueError("Invalid retention rate given")
        retention = float(retention)
        await state.update_data(retention = retention)
        await state.set_state(Cohort.retention_rate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–π –º–µ—Å—è—á–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (audience growth rate, %)")

    except Exception as e:
        logging.exception(e)
        await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ", reply_markup= inline_keyboards.main)
        raise


@router.message(Cohort.retention_rate)
async def finish_cohort_analisis(message:Message, state: FSMContext, bot:Bot):
    growth = message.text
    try:
        if not growth:
            raise ValueError("Invalid retention rate given")
        growth = float(growth)
        data = await state.get_data()
        set_id = data.get("set_id")
        model_id = data.get("model_id")
        retention = data.get("retention")
        await state.clear()
        result = await update_model_cohort_data.update_model_cohort_data(
            telegram_id=message.from_user.id,
            set_id = set_id,
            model_id = model_id,
            retention = retention,
            growth = growth
        )
        if not result:
            raise Exception("Error while patching model")
        
        zip_buf = await get_unit_cohort(
            telegram_id= message.from_user.id,
            unit_id= model_id
        )
        if not zip_buf:
            raise Exception("Error while getting report from the server")
        zip_buf = io.BytesIO(zip_buf)
        with zipfile.ZipFile(zip_buf, 'r') as zip_ref:
            for filename in zip_ref.namelist():
                if filename.endswith(('.png', '.xlsx')): 
                    file_bytes = zip_ref.read(filename)
                    file_buf = io.BytesIO(file_bytes)
                    file_buf.seek(0)

                    document = BufferedInputFile(file_buf.read(), filename=filename)
                    await bot.send_document(chat_id=message.from_user.id, document=document)
        await message.answer("–í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!", reply_markup= inline_keyboards.main)

    except Exception as e:
        logging.exception(e)
        await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ", reply_markup= inline_keyboards.main)
        raise
    finally:
        await state.clear()
    build_log_message(
        telegram_id=message.from_user.id,
        action="callback",
        source="inline",
        payload="count_unit_cohort"
    )

#==============================================================================================================================================================================================
# Set text analisis
#==============================================================================================================================================================================================


@router.callback_query(F.data.startswith("analise_set"))
async def analyse_set_menu_latest(callback: CallbackQuery, state: FSMContext, bot:Bot):
    try:
        await state.clear()
        set_id = callback.data.split("_")[2]
        await callback.message.answer(
            "–ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ç–∞",
            reply_markup= await inline_keyboards.create_set_edit_menu(set_id)
        )
    except Exception as e:
        logging.error(e)
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∏–∑–≤–∏–Ω–∏—Ç–µ", reply_markup= inline_keyboards.main)
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="analize_set"
    )


def format_model_report(data: dict) -> str:
    get = lambda key: escape_md_v2(data.get(key))
    return f"""
üìä *–û—Ç—á–µ—Ç –ø–æ —é–Ω–∏—Ç\\-—ç–∫–æ–Ω–æ–º–∏–∫–µ*

*–ù–∞–∑–≤–∞–Ω–∏–µ:* `{get('name')}`
*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* `{get('users')}`
*–ö–ª–∏–µ–Ω—Ç—ã:* `{get('customers')}`
*AVP:* `{get('AVP')}`
*APC:* `{get('APC')}`
*TMS:* `{get('TMS')}`
*COGS:* `{get('COGS')}`
*COGS1s:* `{get('COGS1s')}`
*FC:* `{get('FC')}`

üî¢ *–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:*
\\- C1 \\(–∫–æ–Ω–≤–µ—Ä—Å–∏—è\\): {get("C1")}
\\- ARPC \\(–¥–æ—Ö–æ–¥ —Å –∫–ª–∏–µ–Ω—Ç–∞\\): {get("ARPC")}
\\- ARPU \\(–¥–æ—Ö–æ–¥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\): {get("ARPU")}
\\- CPA \\(—Ü–µ–Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\): {get("CPA")}
\\- CAC \\(—Ü–µ–Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞\\): {get("CAC")}

üí∞ *–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:*
\\- CLTV \\(–ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\\): {get("CLTV")}
\\- LTV \\(—Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º C1\\): {get("LTV")}
\\- ROI: {get("ROI")} \\%
\\- UCM \\(—é–Ω–∏—Ç\\-contrib\\-–º–∞—Ä–∂–∞\\): {get("UCM")}
\\- CCM \\(–∫–ª–∏–µ–Ω—Ç\\-contrib\\-–º–∞—Ä–∂–∞\\): {get("CCM")}

üìà *–í—ã—Ä—É—á–∫–∞ –∏ –ø—Ä–∏–±—ã–ª—å:*
\\- Revenue \\(–≤—ã—Ä—É—á–∫–∞\\): {get("Revenue")}
\\- Gross Profit \\(–≤–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å\\): {get("Gross_profit")}
\\- Margin \\(–º–∞—Ä–∂–∞\\): {get("Margin")}
\\- FC \\(–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏\\): {get("FC")}
\\- Profit \\(–ø—Ä–∏–±—ã–ª—å\\): {get("Profit")}

‚öñÔ∏è *–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å:*
\\- –¢—Ä–µ–±—É–µ—Ç—Å—è —é–Ω–∏—Ç–æ–≤ –¥–æ BEP: {get("Required_units_to_BEP")}
\\- BEP \\(—Ç–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏\\): {get("BEP")}

üìå *–ü—Ä–∏–±—ã–ª—å–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å:* {"‚úÖ –î–∞" if data.get("CCM", 0)>0 else "‚ùå –ù–µ—Ç"}
""".strip()


def format_set_report(data:list):
    result = []
    for i, el in enumerate(data):
        buf = format_unit_report(el)
        if not buf:
            continue
        result.append(buf)
    return result


@router.callback_query(F.data.startswith("count_set_"))
async def count_set_economics(callback: CallbackQuery, state: FSMContext, bot:Bot):
    try:
        set_id = callback.data.split("_")[2]
        analysis = (await set_text_report(
            telegram_id=callback.from_user.id,
            set_id = set_id
        ))
        if not analysis:
            raise ValueError("Error while generating report")
        result = format_set_report(analysis.get("calculated", []))
        for i, el in enumerate(result):
            await callback.message.answer(
                el,
                parse_mode="MarkdownV2"
            )
        await callback.message.answer("–í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!", reply_markup = inline_keyboards.main)
    except Exception as e:
        logging.error(e)
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏", reply_markup= inline_keyboards.main)
    finally:
        await state.clear()
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="count_unit_set"
    )

#===========================================================================================================================
# –°–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
#===========================================================================================================================


@router.callback_query(F.data.startswith("visual_set"))
async def set_visualize_callback(callback: CallbackQuery, state: FSMContext, bot:Bot):
    try:
        set_id = int(callback.data.split("_")[2])
        await state.clear()
        zip_buf = await set_visualize(
            telegram_id= callback.from_user.id,
            set_id = set_id,
        )
        if not zip_buf:
            raise Exception("Error while getting report from the server")
        zip_buf = io.BytesIO(zip_buf)
        with zipfile.ZipFile(zip_buf, 'r') as zip_ref:
            for filename in zip_ref.namelist():
                if filename.endswith(('.png', '.xlsx')): 
                    file_bytes = zip_ref.read(filename)
                    file_buf = io.BytesIO(file_bytes)
                    file_buf.seek(0)

                    document = BufferedInputFile(file_buf.read(), filename=filename)
                    await bot.send_document(chat_id=callback.from_user.id, document=document)
        await callback.message.answer("–í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!", reply_markup= inline_keyboards.main)

    except Exception as e:
        logging.exception(e)
        await callback.message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ", reply_markup= inline_keyboards.main)
        raise
    finally:
        await state.clear()
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="visualize_set"
    )
#===========================================================================================================================
# –°–µ—Ç XLSX –æ—Ç—á–µ—Ç
#===========================================================================================================================

@router.callback_query(F.data.startswith("generate_report_set"))
async def set_generate_xlsx_report_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        set_id = int(callback.data.split("_")[3])
        await state.clear()

        xlsx_bytes = await set_generate_report(
            telegram_id=callback.from_user.id,
            set_id=set_id,
        )

        if not xlsx_bytes:
            raise Exception("Error while getting report from the server")

        file_buf = io.BytesIO(xlsx_bytes)
        file_buf.seek(0)

        document = BufferedInputFile(file_buf.read(), filename="report.xlsx")
        await bot.send_document(
            chat_id=callback.message.chat.id,
            document=document
        )

        await callback.message.answer("–í–∞—à XLSX –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!", reply_markup=inline_keyboards.main)

    except Exception as e:
        logging.exception(e)
        await callback.message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ", reply_markup=inline_keyboards.main)
        raise
    finally:
        await state.clear()
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="generate_report_set"
    )
#===========================================================================================================================
# –°–µ—Ç –∫–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
#===========================================================================================================================

@router.callback_query(F.data.startswith("cohort_set"))
async def start_set_cohort_analisis(callback: CallbackQuery, state: FSMContext, bot:Bot):
    try:
        await state.clear()
        set_id = int(callback.data.split("_")[2])
        await callback.answer()
        await state.set_state(SetCohort.handle_unit)
        await state.update_data(set_id = set_id)

        """
        analysis = await get_unit_report.get_unit_report(
            telegram_id=callback.from_user.id,
            unit_id=model_id
        )
        if not analysis:
            logging.error("Failed to get report")
            await callback.message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö üòî",
                reply_markup=inline_keyboards.main)
            await callback.answer()
            return
        analysis = analysis[0]
        """
        await callback.message.answer("–î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä—É–∑–µ–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–Ω—Ü–∏–ø ceteris paribus, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ –≤—Å–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–º –º–æ–¥–µ–ª—è–º")
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (retention rate, %)")
    except Exception as e:
        logging.error(e)
        await callback.message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ", reply_markup= inline_keyboards.main)


@router.message(SetCohort.handle_unit)
async def continue_set_cohort_analisis(message:Message, state: FSMContext, bot:Bot):
    retention = message.text
    try:
        if not retention:
            raise ValueError("Invalid retention rate given")
        retention = float(retention)
        await state.update_data(retention = retention)
        await state.set_state(SetCohort.retention_rate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–π –º–µ—Å—è—á–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (audience growth rate, %)")

    except Exception as e:
        logging.exception(e)
        await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ", reply_markup= inline_keyboards.main)
        raise


@router.message(SetCohort.retention_rate)
async def finish_set_cohort_analisis(message:Message, state: FSMContext, bot:Bot):
    growth = message.text
    try:
        if not growth:
            raise ValueError("Invalid retention rate given")
        growth = float(growth)
        data = await state.get_data()
        set_id = data.get("set_id")
        retention = data.get("retention")
        await state.clear()
        set_data = await retrieve_set(
            telegram_id= message.from_user.id,
            set_id= set_id
        )
        if not set_data:
            raise ValueError("No set data provided")
        models = set_data.get("units")
        if not models:
            raise ValueError("Error receiving models")
        for model in models:
            result = await update_model_cohort_data.update_model_cohort_data(
                telegram_id=message.from_user.id,
                set_id = set_id,
                model_id = model.get("id"),
                retention = retention,
                growth = growth
            )
            if not result:
                raise Exception("Error while patching model")

        zip_buf = await get_set_cohort(
            telegram_id= message.from_user.id,
            set_id=set_id
        )
        if not zip_buf:
            raise Exception("Error while getting report from the server")
        zip_buf = io.BytesIO(zip_buf)
        with zipfile.ZipFile(zip_buf, 'r') as zip_ref:
            for filename in zip_ref.namelist():
                if filename.endswith(('.png', '.xlsx')): 
                    file_bytes = zip_ref.read(filename)
                    file_buf = io.BytesIO(file_bytes)
                    file_buf.seek(0)

                    document = BufferedInputFile(file_buf.read(), filename=filename)
                    await bot.send_document(chat_id=message.from_user.id, document=document)
        await message.answer("–í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!", reply_markup= inline_keyboards.main)

    except Exception as e:
        logging.exception(e)
        await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ", reply_markup= inline_keyboards.main)
        raise
    finally:
        await state.clear()
    build_log_message(
        telegram_id=message.from_user.id,
        action="callback",
        source="inline",
        payload="count_cohort_set"
    )
#===========================================================================================================================
# –ó–∞–≥–ª—É—à–∫–∞
#===========================================================================================================================

@router.message()
async def all_other_messages(message: Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ üßê")
    photo_data = await get_cat_error_async()
    if photo_data:
        photo_to_send = BufferedInputFile(photo_data, filename="cat_error.jpg")
        await message.bot.send_photo(chat_id=message.chat.id, photo=photo_to_send)


async def send_post_photos(callback: CallbackQuery, post: Dict[str, Any]):
    photo_ids = post.get('photos', [])

    if not photo_ids:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. üñºÔ∏è")
        return

    first_photo_id = photo_ids[0]
    caption_text = f"**{post.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**"
    
    await callback.message.answer_photo(
        photo=first_photo_id,
        caption=caption_text,
        parse_mode="MarkdownV2"
    )

    for photo_id in photo_ids[1:]:
        await callback.message.answer_photo(photo=photo_id)
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="undefined"
    )

#===========================================================================================================================
# –û—Ç–ª–æ–≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
#===========================================================================================================================

@router.callback_query()
async def unknown_callback(callback: CallbackQuery):
    logging.info(f"UNHANDLED CALLBACK: {callback.data}")
    await callback.answer(f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–ª—É—á–µ–Ω–æ: {callback.data}", show_alert=True)
    build_log_message(
        telegram_id=callback.from_user.id,
        action="callback",
        source="inline",
        payload="undefined"
    )